h1. Contributing

Do you want to contribute something to rails_apps_composer? Here's how you can help.

h2. Timeliness

The current maintainer for the project, "Daniel Kehoe":https://github.com/DanielKehoe, works fulltime on the RailsApps project, which includes updating rails_apps_composer as well as maintaining "example applications":http://railsapps.github.io/ and writing "tutorials":http://railsapps.github.io/.

Whether it is an email, a pull request that corrects an error, or contribution of a new feature, he will try to respond as soon as possible.

In general, he updates the rails_apps_composer gem approximately monthly. The priority is fixing bugs that impact large numbers of users, as well as adding features that directly support creation of the RailsApps example applications.

We love to receive pull requests for new recipes and significant new features. However, it is not always possible to evaluate and include significant new contributions right away, as much as we might like to. So we ask for your patience as we work through any backlog.

h2. Background

h3. Used by the RailsApps Project

The primary purpose of the rails_apps_composer gem is to automate the maintenance of the RailsApps example applications. Each of the RailsApps example applications are generated by the script we call the Rails Composer tool. The Rails Composer tool is actually a Rails application template generated by the rails_apps_composer gem.

The rails_apps_composer gem creates the Rails Composer application template from a predefined set of recipes, notably the *railsapps.rb* recipe but also others. Choosing "core" creates the Rails Composer application template, as seen here:

<pre>
$ rails_apps_composer template ~/mypath/railsapps/rails-composer/composer.rb -r core
</pre>

Each time I release a new version of the rails_apps_composer gem, I generate and release a new version of the Rails Composer tool. Often, at the same time, I generate new versions of each of the RailsApps
example applications using the new Rails Composer application template. Then I run tests on each of example applications.

It's important to realize that the RSpec tests built into the rails_apps_composer gem are NOT adequate to ensure that all the example applications run without problems. The only way to know for sure that changes to the rails_apps_composer gem have not broken any example applications is to regenerate each example application and run its test suite. We do not have an automated test suite to test them all.

That is one reason why there is often a delay between the time you submit a new feature and the time it is released as part of the rails_apps_composer gem.

h3. Application Templates for Others

Many developers use the rails_apps_composer gem to create their own application templates. This includes consultants and enterprise developers who maintain their own preferred starter applications. In general, if new features are significant and useful to the community, I will include them in the gem, even if they are not used by the RailsApps example applications.

h3. Rails Composer

Many more developers use the "generic" Rails Composer tool to generate starter applications. The Rails Composer tool will create any of the RailsApps example applications. It also has a "build your own application" option.

The "build your own application" option is largely experimental. That means there are some combinations of options that may not work together. We like to debug the problems and include fixes in the rails_apps_composer recipes when we encounter these integration issues.

h2. Issues

Reporting an "issue on Github":https://github.com/RailsApps/rails_apps_composer/issues is one of the simplest ways to contribute. Reporting issues (and fixing!) helps everyone.

When you generate an application, the application’s README.textile file will contain a "diagnostics report":http://railsapps.github.io/tutorial-rails-apps-composer.html#Diagnostics. Please include the diagnostics report when you create an issue on GitHub.

h2. Forks, Branches, and Pull Requests

GitHub helps you make improvements to the project by allowing forking, branches, and pull requests.

"Forking":https://help.github.com/articles/fork-a-repo means you make your own version of the repository so you can make changes.

"Branching":https://help.github.com/articles/creating-and-deleting-branches-within-your-repository means you separate your fix or a feature from the main trunk of the code so we can examine and test your fix or a feature in isolation before adding it to the trunk.

"Pull request":https://help.github.com/articles/using-pull-requests means you tell us that you have a fix or a feature to add.

Here's a helpful "article":http://gun.io/blog/how-to-github-fork-branch-and-pull-request/ on how to fork, branch, and make a pull request.

h3. Fork

Fork the "rails_apps_composer repository":https://github.com/RailsApps/rails_apps_composer.git, get your copy into your local environment development, and configure so you can track changes to the original repository.

Click the "Fork" button you see in the "rails_apps_composer repository":https://github.com/RailsApps/rails_apps_composer.git. Then:

<pre>
$ git clone https@github.com:username/rails_apps_composer.git
$ cd rails_apps_composer
$ git remote add upstream https@github.com:RailsApps/rails_apps_composer.git
</pre>

h3. Branch

Branching allows you to build new features or try out fixes without mixing your code with the main trunk of the project.

If your fix is very tiny, like correction of a typo, you don't need to create a branch.

For fixes or features of any complexity, you must create a branch so we can examine and review your code before we add it to the main trunk.

GitHub explains how to "create a branch from your web browser":https://help.github.com/articles/creating-and-deleting-branches-within-your-repository.

Here's how to create a branch from the command line:

<pre>
$ git checkout -b myfeature
</pre>

The command creates a new branch named "myfeature" and switches to it, analogous to copying all your files to a new directory and moving to work in the new directory (though that is not really what happens with Git).

You can see a list of all your branches:

<pre>
$ git branch
</pre>

Make your changes, then commit your changes to git:

<pre>
$ git add -A
$ git commit -m "work in progress"
</pre>

You can make multiple commits as you continue your work.

When the changes are complete, merge the working branch to “master” and squash the commits so you have just one commit for the entire feature:

<pre>
$ git checkout master
$ git merge --squash myfeature
$ git commit -m "implement my feature"
</pre>

You can delete the working branch after the pull request is accepted:

<pre>
$ git branch -D myfeature
</pre>

h3. Pull Requests

Make a GitHub pull request to tell use about your new feature or fixes.

On GitHub, visit your forked version of the repository and select the branch you've created.

Above the list of files and the information about the most recent commit, you'll find a gray bar that includes the "Pull Request" link. Click "Pull Request" nad GitHub will show you a review of all the differences between your version and the original.

Click the message "Click to create a pull request for this comparison."

Enter a message describing your work and click the button "Send pull request."

The maintainer of the project will immediately receive an email message that you've made a pull request.

It could be a few hours or a few days before you hear from the maintainer. We promise we'll reply as soon as we can.

No matter what you've contributed, small fix or large feature, you have our grateful appreciation for your interest and help.

h2. Coding Standards

Please follow the coding conventions used throughout the project (indentation, comments, etc.).

If you need guidance, check the "ruby-style-guide":https://github.com/bbatsov/ruby-style-guide.

h2. Credits

We try to mention all contributors in the CHANGELOG file (and we apologize if we've overlooked anyone).

If you need an additional acknowledgment, for example if you'd like to be cited for recognition by consulting clients, prospective employers, or your school, drop the maintainer an email.
